<?php
/**
 * @file
 * Hic sunt dracones.
 */

/**
 * Implements hook_views_api().
 */
function futurium_isa_extras_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data_alter().
 */
function futurium_isa_extras_views_data_alter(&$data) {

  $info = field_info_field('og_group_ref');
  foreach ($info['bundles'] as $key => $value) {
    // Filter content on user groups.
    $data[$key]['user_og_nid'] = array(
      'title' => t('Logged In User Groups/No Group content'),
      'help' => t('Filters the content on the users groups.'),
      'filter' => array(
        'real field' => 'gid',
        'handler' => 'futurium_isa_extras_filter_group_content_or_not',
      ),
    );
  }
}

/**
 * Implements hook_admin_paths_alter().
 */
function futurium_isa_extras_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
}

/**
 * Implements hook_preprocess_node().
 */
function futurium_isa_extras_preprocess_node(&$vars) {
  $vars['classes_array'][] = "view-mode-" . $vars['view_mode'];
  $vars['display_submitted'] = FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function futurium_isa_extras_menu_alter(&$items) {
  unset($items['message/create/private-message']);
  $items['search/site']['menu_name'] = 'navigation';
  /* TEMP */
  $items['user/%user/display']['access callback'] = FALSE;
  $items['node/%node/display']['access callback'] = FALSE;
  $items['node/%node/node_export']['access callback'] = FALSE;
}

/**
 * Implements hook_preprocess_block().
 */
function futurium_isa_extras_preprocess_block(&$variables) {
  if ($variables['block']->region == 'footer') {
    $variables['classes_array'][] = "footer-block";
  }
  $variables['classes_array'][] = str_replace("_", "-", $variables['block']->delta);
}

/**
 * Implements hook_page_build().
 */
function futurium_isa_extras_page_build() {
  $obj = menu_get_object();
  if (isset($obj->type)) {
    switch ($obj->type) {
      case 'futurium_group':
        menu_tree_set_path('main-menu', 'groups');
        break;

      case 'future':
        menu_tree_set_path('main-menu', 'futures');
        break;

      case 'event_d4eu':
        menu_tree_set_path('main-menu', 'events');
        break;

      case 'ideas':
        menu_tree_set_path('main-menu', 'ideas');
        break;

      case 'evidence':
        menu_tree_set_path('main-menu', 'library');
        break;

    }
  }
}

/**
 * Helper to set default theme settings.
 */
function _bootstrap_default_settings() {

  $settings = array(
    'toggle_logo' => 0,
    'toggle_name' => 1,
    'toggle_slogan' => 1,
    'toggle_node_user_picture' => 0,
    'toggle_comment_user_picture' => 0,
    'toggle_comment_user_verification' => 0,
    'toggle_favicon' => 1,
    'toggle_main_menu' => 1,
    'toggle_secondary_menu' => 0,
    'default_logo' => 1,
    'logo_path' => "",
    'logo_upload' => "",
    'default_favicon' => 1,
    'favicon_path' => "",
    'favicon_upload' => "",
    'general__active_tab' => "edit-theme-settings",
    'bootstrap__active_tab' => "edit-javascript",
    'bootstrap_breadcrumb' => "1",
    'bootstrap_breadcrumb_home' => 0,
    'bootstrap_breadcrumb_title' => 1,
    'bootstrap_navbar_position' => "",
    'bootstrap_navbar_inverse' => 0,
    'bootstrap_region_well-navigation' => "",
    'bootstrap_region_well-header' => "",
    'bootstrap_region_well-highlighted' => "",
    'bootstrap_region_well-help' => "",
    'bootstrap_region_well-content_slider' => "",
    'bootstrap_region_well-content_top' => "",
    'bootstrap_region_well-content_before_middle' => "",
    'bootstrap_region_well-content_before' => "",
    'bootstrap_region_well-content' => "",
    'bootstrap_region_well-content_after' => "",
    'bootstrap_region_well-content_after_middle' => "",
    'bootstrap_region_well-content_bottom' => "",
    'bootstrap_region_well-sidebar_first' => "well",
    'bootstrap_region_well-sidebar_second' => "",
    'bootstrap_region_well-footer' => "",
    'bootstrap_region_well-page_top' => "",
    'bootstrap_region_well-page_bottom' => "",
    'bootstrap_anchors_fix' => 1,
    'bootstrap_anchors_smooth_scrolling' => 1,
    'bootstrap_popover_enabled' => 1,
    'bootstrap_popover_animation' => 1,
    'bootstrap_popover_html' => 0,
    'bootstrap_popover_placement' => "right",
    'bootstrap_popover_selector' => "",
    'bootstrap_popover_trigger' => array(
      'click' => "click",
      'hover' => 0,
      'focus' => 0,
      'manual' => 0,
    ),
    'bootstrap_popover_title' => "",
    'bootstrap_popover_content' => "",
    'bootstrap_popover_delay' => "0",
    'bootstrap_popover_container' => "body",
    'bootstrap_tooltip_enabled' => 1,
    'bootstrap_tooltip_descriptions' => 1,
    'bootstrap_tooltip_animation' => 1,
    'bootstrap_tooltip_html' => 0,
    'bootstrap_tooltip_placement' => "auto left",
    'bootstrap_tooltip_selector' => "",
    'bootstrap_tooltip_trigger' => array(
      'click' => "click",
      'hover' => 0,
      'focus' => 0,
      'manual' => 0,
    ),
    'bootstrap_tooltip_delay' => "0",
    'bootstrap_tooltip_container' => "body",
    'bootstrap_cdn' => "3.0.2",
    'bootstrap_bootswatch' => "",
    'bootstrap_rebuild_registry' => 0,
    'bootstrap_toggle_jquery_error' => 0,
    'jquery_update_jquery_version' => "",
  );

  theme_disable(array('bartik', 'ec_resp'));

  $enable = array(
    'theme_default' => 'futurium_isa_theme',
    'admin_theme' => 'adminimal',
  );
  theme_enable($enable);

  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  variable_set('node_admin_theme', 0);
  variable_set('theme_futurium_isa_theme_settings', $settings);
}

/**
 * Implements hook_block_info().
 */
function futurium_isa_extras_block_info() {
  $blocks['contextualized_links'] = array(
    'info' => t('Contextualized Links'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['group_add_member'] = array(
    'info' => t('Group Add member'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['group_send_message'] = array(
    'info' => t('Group Send message'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['node_authors'] = array(
    'info' => t('Node Authors'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['node_social_share'] = array(
    'info' => t('Node Share'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_preprocess_page().
 */
function futurium_isa_extras_preprocess_page(&$vars) {
  // Add the collapsible block to the page.
  $block = module_invoke('futurium_isa_extras', 'block_view', 'user_actions_block');
  $vars['collapsible_user_block'] = theme('collapsible_user_block', array());
}

function futurium_isa_extras_theme($existing, $type, $theme, $path) {
  return array(
    'collapsible_user_block' => array(
      'variables' => array(),
      'template' => 'collapsible-user-block',
      'path' => drupal_get_path('module', 'futurium_isa_extras') . '/templates',
    ),
  );
}

function futurium_isa_extras_preprocess_collapsible_user_block(&$vars) {
  if (user_is_anonymous()) {

    $vars['title'] = t("Login");
    $vars['content']['register']['title'] = t("Don't have an account?");
    $vars['content']['login']['title'] = t("Already registered?");
    $login_form = drupal_get_form("user_login");
    $vars['content']['login']['content'] = render($login_form);

    $register_link = l(
      t("Register"),
      'user/register',
      array(
        'attributes' => array(
          'class' => array(
            'btn',
          ),
        ),
      )
    );

    $vars['content']['register']['content'] = $register_link;

  }
  else {
    $account = user_load($vars['user']->uid);
    $username = format_username($account);

    $vars['account']['name'] = $username;
    $vars['account']['picture']['image_style'] = 'thumbnail';
    $vars['account']['picture']['class'] = array();
    $vars['account']['picture']['title'] = t("@username's profile", array('@username' => $username));

    $pic = !empty($account->picture->uri) ? $account->picture->uri : variable_get('user_picture_default');

    $vars['account']['picture']['path'] = $pic;

    $menu = array(
      'links' => menu_navigation_links('user-menu'),
      'attributes' => array(
        'class' => array(
          'links',
          'user-menu',
        ),
      ),
    );

    $links = theme('links', $menu);
    $vars['title'] = $username;
    $vars['content'] = $links;
    $vars['username'] = $username;
  }
}

function futurium_isa_extras_process_collapsible_user_block(&$vars) {
  if (user_is_anonymous()) {

  }
  else {

    $user_pic = theme(
      'image_style', array(
        'style_name' => $vars['account']['picture']['image_style'],
        'path' => $vars['account']['picture']['path'],
        'attributes' => array(
          'class' => $vars['account']['picture']['class'],
          'title' => $vars['account']['picture']['title'],
        ),
      )
    );

    $menu = array(
      'links' => menu_navigation_links('user-menu'),
      'attributes' => array(
        'class' => array(
          'links',
          'user-menu',
        ),
      ),
    );

    $links = theme('links', $menu);
    $vars['title'] = '<span class="user-picture">' . $user_pic .'</span>';
    $vars['title'] .= '<span class="user-name">' . $vars['username'] .'</span>';
    $vars['content'] = theme('links', $menu);
  }
}

/**
 * Implements hook_block_view().
 */
function futurium_isa_extras_block_view($delta = '') {
  $block = array();

  $is_group = FALSE;

  $item = menu_get_item();
  if (substr($item['path'], 0, 5) == 'user/') {
    $uid = arg(1);
    $obj = user_load($uid);
  }

  if (substr($item['path'], 0, 5) == 'node/') {
    $nid = arg(1);
    if ($nid != 'add') {
      $obj = node_load($nid);
      $is_group = TRUE;
      if ($obj->type == 'futurium_group') {
        $link_options = array(
          'query' => array(
            'og_group_ref' => $obj->nid,
          ),
        );
      }
    }
  }

  switch ($delta) {

    case 'contextualized_links':

      switch ($item['path']) {
        case 'user':
        case 'user/login':
          $links['register'] = l(t('Create new account'), 'user/register');
          $links['new-password'] = l(t('Request a new password'), 'user/password');
          break;

        case 'user/register':
          $links['title'] = t("Already have a profile?");
          $links['login'] = l(t('Login'), 'user', array('attributes' => array('class' => 'btn')));
          break;

        case 'user/password':
          $links['login'] = l(t('Login'), 'user');
          $links['register'] = l(t('Create new account'), 'user/register');
          break;

        case 'user/%':
          $links['title']  = t("Create new...");
          $links['add-group'] = l(t('Group'), 'node/add/futurium-group');
          $links['add-future'] = l(t('Future'), 'node/add/future');
          $links['add-idea'] = l(t('Idea'), 'node/add/ideas');
          $links['add-evidence'] = l(t('Evidence'), 'node/add/evidence');
          $links['add-event'] = l(t('Event'), 'node/add/event-d4eu');
          break;

        case 'user/%/groups':
          $links['title']  = t("Create new...");
          $links['add-group'] = l(t('Group'), 'node/add/futurium-group');
          break;

        case 'user/%/futures':
          $links['title']  = t("Create new...");
          $links['add-future'] = l(t('Future'), 'node/add/future');
          break;

        case 'user/%/ideas':
          $links['title']  = t("Create new...");
          $links['add-idea'] = l(t('Idea'), 'node/add/ideas');
          break;

        case 'user/%/evidence':
          $links['title']  = t("Create new...");
          $links['add-evidence'] = l(t('Evidence'), 'node/add/evidence');
          break;

        case 'user/%/events':
          $links['title']  = t("Create new...");
          $links['add-event'] = l(t('Event'), 'node/add/event-d4eu');
          break;

        case 'node/%/futures':
          if (og_user_access('node', $obj->nid, 'create future content')) {
            $links['add-future'] = l(t('Future'), 'node/add/future', $link_options);
          }
          break;

        case 'node/%/ideas':
          if (og_user_access('node', $obj->nid, 'create ideas content')) {
            $links['add-idea'] = l(t('Idea'), 'node/add/ideas', $link_options);
          }
          break;

        case 'node/%':
          $links['title']  = t("Add new...");
          if ($is_group) {
            if (og_user_access('node', $obj->nid, 'create future content')) {
              $links['add-future'] = l(t('Future'), 'node/add/future', $link_options);
            }
            if (og_user_access('node', $obj->nid, 'create ideas content')) {
              $links['add-idea'] = l(t('Idea'), 'node/add/ideas', $link_options);
            }
            if (og_user_access('node', $obj->nid, 'create evidence content')) {
              $links['add-evidence'] = l(t('Evidence'), 'node/add/evidence', $link_options);
            }
            if (og_user_access('node', $obj->nid, 'create event_d4eu content')) {
              $links['add-event'] = l(t('Event'), 'node/add/event-d4eu', $link_options);
            }
          }
          break;

        case 'node/%/members':
          break;

      }

      $variables = array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(
          'class' => array(
            'nopadding',
          ),
        ),
      );

      if (!empty($links)) {
        drupal_alter('contextualized_links', $links, $item['path']);
        foreach ($links as $k => $link) {
          if ($k == 'title') {
            $block['subject'] = $link;
          }
          else {
            $variables['items'][] = array(
              'data' => $link,
              'class' => array($k),
            );
          }
        }

        $block['content'] = theme('item_list', $variables);
      }
      break;

    case 'group_add_member':
      if (!empty($obj)) {
        if ($obj->type == 'futurium_group') {
          module_load_include('inc', 'og_ui', 'og_ui.admin');
          $form = drupal_get_form('og_ui_add_users', 'node', $obj->nid);
          $block['content'] = drupal_render($form);
        }
      }
      break;

    case 'group_send_message':
      if (!empty($obj) && module_exists('message_private')) {
        if ($obj->type == 'futurium_group') {
          module_load_include('inc', 'og_ui', 'og_ui.admin');
          $form = drupal_get_form('message_ui_instance_message_manage', 'private_message');

          $group_users = futurium_isa_extras_get_users_in_group($obj->nid);
          foreach ($group_users as $k => $data) {
            $form['field_message_user_ref'][LANGUAGE_NONE][$k + 1]['target_id']['#default_value'] = "$data->name ($data->uid)";
            $form['field_message_user_ref']['#prefix'] = '<div style="display:none">';
            $form['field_message_user_ref']['#suffix'] = '</div>';
          }

          $form['field_message_group_ref'][LANGUAGE_NONE]['#value'] = $obj->nid;
          $form['field_message_group_ref']['#prefix'] = '<div style="display:none">';
          $form['field_message_group_ref']['#suffix'] = '</div>';

          $form['additional_settings']['#prefix'] = '<div style="display:none">';
          $form['additional_settings']['#suffix'] = '</div>';

          $block['content'] = drupal_render($form);
        }
      }
      break;

    case 'node_social_share':

      $variables = array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array('class' => array('share-links', 'list-inline')),
      );

      $url = url($_GET['q'], array('absolute' => TRUE));
      $address = urlencode($url);

      $class = 'facebook share';
      $l_options = array('attributes' => array('class' => $class, 'target' => '_blank'));
      $variables['items'][] = array(
        'data' => l(t("Facebook"), "https://www.facebook.com/sharer/sharer.php?u=" . $address, $l_options),
        'class' => array($class),
      );

      $class = 'twitter share';
      $l_options = array('attributes' => array('class' => $class, 'target' => '_blank'));
      $variables['items'][] = array(
        'data' => l(t("Twitter"), "https://twitter.com/home?status=" . $address, $l_options),
        'class' => array($class),
      );

      $class = 'google-plus share';
      $l_options = array('attributes' => array('class' => $class, 'target' => '_blank'));
      $variables['items'][] = array(
        'data' => l(t("Google Plus"), "https://plus.google.com/share?url=" . $address, $l_options),
        'class' => array($class),
      );

      $block['content']['#markup'] = theme('item_list', $variables);
      $block['content']['#attached']['js'][] = drupal_get_path('module', 'futurium_isa_extras') . '/js/misc.js';
      break;
  }
  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function futurium_isa_extras_ctools_plugin_directory($module, $plugin) {
  if (($module == "panels" || $module == "ctools") &&
    in_array($plugin, array('access', 'layouts', 'styles'))) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function futurium_isa_extras_field_extra_fields() {
  foreach (array('future', 'ideas', 'event_d4eu') as $node_type) {
    // Flaggings (Like & Attending).
    switch ($node_type) {
      case 'ideas':
      case 'future':
        $extrafield_name = 'like';
        break;

      case 'event_d4eu':
        $extrafield_name = 'attending';
        break;
    }

    $flag = flag_get_flag($extrafield_name);
    if (isset($flag) && $flag) {
      $extra['node'][$node_type]['display'][$extrafield_name] = array(
        'label' => t("@flag_title counter", array('@flag_title' => $flag->title)),
        'description' => t('@flag_name counter.', array('@flag_name' => $flag->name)),
        'weight' => 50,
      );
    }

    // Comment count.
    $extrafield_name = 'comment_count';
    $extra['node'][$node_type]['display'][$extrafield_name] = array(
      'label' => t("Comment count"),
      'description' => t('Node comments count'),
      'weight' => 51,
    );
  }

  // Join group link.
  $extrafield_name = 'join_group';
  $extra['node']['futurium_group']['display'][$extrafield_name] = array(
    'label' => t("Join Group"),
    'description' => t('Join group.'),
    'weight' => 51,
  );

  // Edit profile link.
  $extrafield_name = 'edit_group';
  $extra['node']['futurium_group']['display'][$extrafield_name] = array(
    'label' => t("Edit Group"),
    'description' => t('Edit group.'),
    'weight' => 52,
  );

  // City only.
  $extrafield_name = 'addressfield_city';
  $extra['node']['event_d4eu']['display'][$extrafield_name] = array(
    'label' => t("Addressfield City"),
    'description' => t('Address field city only.'),
    'weight' => 52,
  );

  // Follow flag.
  $extrafield_name = 'follow';
  $extra['user']['user']['display'][$extrafield_name] = array(
    'label' => t("Follow"),
    'description' => t('Follow user.'),
    'weight' => 51,
  );

  // Edit profile link.
  $extrafield_name = 'edit';
  $extra['user']['user']['display'][$extrafield_name] = array(
    'label' => t("Edit"),
    'description' => t('Edit account.'),
    'weight' => 52,
  );

  // City only.
  $extrafield_name = 'user_city';
  $extra['user']['user']['display'][$extrafield_name] = array(
    'label' => t("City"),
    'description' => t('Addressfield City only.'),
    'weight' => 53,
  );

  // Edit profile link.
  $extrafield_name = 'logout';
  $extra['user']['user']['display'][$extrafield_name] = array(
    'label' => t("Logout"),
    'description' => t('Log out.'),
    'weight' => 52,
  );

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function futurium_isa_extras_node_view($node, $view_mode, $langcode) {

  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);

  $link_options = array(
    'attributes' => array(
      'class' => array(
        'btn',
      ),
    ),
  );

  // Likes.
  $extrafield_name = 'like';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    $flag = flag_get_flag($extrafield_name);
    $count = $flag->get_count($node->nid);
    $label = '<span class="label-wrapper">' . format_plural($count, t('Like'), t('Likes')) . '</span>';
    $node->content[$extrafield_name] = array('#markup' => '<div class="field fake-field like-count">' . $count . ' ' . $label . '</div>');
  }

  // Attending.
  $extrafield_name = 'attending';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    $flag = flag_get_flag($extrafield_name);
    $count = $flag->get_count($node->nid);
    $label = '<span class="label-wrapper">' . t('Going') . '</span>';;
    $node->content[$extrafield_name] = array(
      '#markup' => '<div class="field fake-field attending-count">' . $count . ' ' . $label . '</div>',
    );
  }

  // Comment count.
  $extrafield_name = 'comment_count';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    $count = $node->comment_count;
    $label = '<span class="label-wrapper">' . format_plural($count, t('Comment'), t('Comments')) . '</span>';
    $node->content[$extrafield_name] = array(
      '#markup' => '<div class="field fake-field comment-count">' . $count . ' ' . $label . '</div>',
    );
  }

  // Addressfield city only.
  $extrafield_name = 'addressfield_city';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    if (isset($node->field_location[LANGUAGE_NONE][0])) {
      $location = $node->field_location[LANGUAGE_NONE][0];
      if (!empty($location)) {
        $city = ucwords($location['locality']);
        $node->content[$extrafield_name] = array(
          '#markup' => '<div class="field fake-field location-city">' . $city . '</div>',
        );
      }
    }
  }

  // Edit group.
  $extrafield_name = 'edit_group';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    global $user;
    $account = user_load($user->uid);
    if (og_user_access('node', $node->nid, 'edit group', $account)) {
      $node->content[$extrafield_name] = array(
        '#markup' => l(t("Edit group"), 'node/' . $node->nid . '/edit', $link_options),
      );
    }
  }

  // Edit group.
  $extrafield_name = 'join_group';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    global $user;
    $account = user_load($user->uid);

    // Not a member, show join link
    // todo: group is invite only?
    if ($user->uid != 0) {
      if (!og_is_member('node', $node->nid, 'user', $account)) {
        $node->content[$extrafield_name] = array(
          '#markup' => l(t('Join Group'), 'group/node/' . $node->nid . '/subscribe/og_user_node', $link_options),
        );
      }
      else {
        if ($node->uid != $account->uid) {
          $node->content[$extrafield_name] = array(
            '#markup' => l(t('Leave Group'), 'group/node/' . $node->nid . '/unsubscribe/og_user_node', $link_options),
          );
        }
      }
    }
  }
}

/**
 * Not sure what this is for.
 */
function futurium_isa_extras_preprocess_link(&$variables) {
  if (strpos($variables['path'], 'group/node') === 0) {
    $variables['options']['attributes']['class'][] = 'btn';
  }
}

/**
 * Implements hook_user_view().
 */
function futurium_isa_extras_user_view($account, $view_mode, $langcode) {

  $extrafields = field_extra_fields_get_display('user', 'user', $view_mode);

  $link_options = array(
    'attributes' => array(
      'class' => array(
        'btn',
      ),
    ),
  );

  // Follow.
  $extrafield_name = 'follow';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    $account->content[$extrafield_name] = array('#markup' => flag_create_link('follow_user', $account->uid));
  }

  // Edit.
  $extrafield_name = 'edit';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    global $user;
    if ($user->uid == $account->uid || user_access('administer users')) {
      $account->content[$extrafield_name] = array(
        '#markup' => l(t("Edit profile"), 'user/' . $account->uid . '/edit', $link_options),
      );
    }
  }

  // Logout.
  $extrafield_name = 'logout';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    global $user;
    if ($user->uid == $account->uid) {
      $account->content[$extrafield_name] = array(
        '#markup' => l(t("Logout"), 'user/logout', $link_options),
      );
    }
  }

  // City and Country.
  $extrafield_name = 'user_city';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    if (isset($account->field_location[LANGUAGE_NONE][0])) {
      $location = $account->field_location[LANGUAGE_NONE][0];
      if (!empty($location)) {
        $city = ucwords($location['locality']);
        $country_info = country_load($location['country']);
        $country = $country_info->name;

        $account->content[$extrafield_name] = array(
          '#markup' => '<div class="field field-name-field-location field-type-addressfield field-label-inline clearfix"><div class="field-label">' . t("Location") . ':&nbsp;</div>' . $city . '  (' . $country . ')</div>',
        );
      }
    }
  }

}

/**
 * Implements hook_ds_fields_info().
 */
function futurium_isa_extras_ds_fields_info($entity_type) {
  $fields = array();

  $fields['comment']['author'] = array(
    'title' => t('Author'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_author',
  );

  $fields['node']['member_count'] = array(
    'title' => t('Member count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_member_count',
    'ui_limit' => array(
      'futurium_group|teaser',
      'futurium_group|teaser_w_pic',
      'futurium_group|node_header',
    ),
  );

  $fields['node']['futures_count'] = array(
    'title' => t('Futures count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_futures_count',
    'ui_limit' => array(
      'futurium_group|teaser',
      'futurium_group|teaser_w_pic',
      'futurium_group|node_header',
    ),
  );

  $fields['node']['ideas_count'] = array(
    'title' => t('Ideas count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_ideas_count',
    'ui_limit' => array(
      'futurium_group|teaser',
      'futurium_group|teaser_w_pic',
      'futurium_group|node_header',
    ),
  );

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
}

/**
 * Render the node author field.
 */
function futurium_isa_extras_ds_field_author($field) {
  $uid = $field['entity']->uid;
  $account = user_load($uid);
  $content = theme('username', array('account' => $account));
  return $content;
}

/**
 * Render the group member count field.
 */
function futurium_isa_extras_ds_field_member_count($field) {
  $nid = $field['entity']->nid;
  $total = futurium_isa_extras_count_group_members($nid);
  $count = '<div class="field fake-field member-count">' . format_plural($total, '1 Member', '@count Members') . '</div>';
  return render($count);
}

/**
 * Render the group member count field.
 */
function futurium_isa_extras_ds_field_futures_count($field) {
  $nid = $field['entity']->nid;
  $total = futurium_isa_extras_count_group_content($nid, 'future');
  $count = '<div class="field fake-field futures-count">' . format_plural($total, '1 Future', '@count Futures') . '</div>';
  return render($count);
}

/**
 * Render the group member count field.
 */
function futurium_isa_extras_ds_field_ideas_count($field) {
  $nid = $field['entity']->nid;
  $total = futurium_isa_extras_count_group_content($nid, 'ideas');
  $count = '<div class="field fake-field ideas-count">' . format_plural($total, '1 Idea', '@count Ideas') . '</div>';
  return render($count);
}

/**
 * Helper function to count group members.
 */
function futurium_isa_extras_count_group_members($nid) {

  $group_type = 'node';
  $group = entity_load_single($group_type, $nid);

  if (!$group || !og_is_group($group_type, $group)) {
    // Arguments are not a valid group.
    return;
  }

  $items = array();

  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition('group_type', $group_type, '=')
    ->propertyCondition('gid', $nid, '=')
    ->count();

  $query = clone $base_query;
  $count = $query
    ->propertyCondition('entity_type', 'user', '=')
    ->execute();

  return $count;

}

/**
 * Helper function to count group content.
 */
function futurium_isa_extras_count_group_content($nid, $content_type) {

  $group_type = 'node';
  $group = entity_load_single($group_type, $nid);

  if (!$group || !og_is_group($group_type, $group)) {
    // Arguments are not a valid group.
    return;
  }

  $items = array();

  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition('group_type', $group_type, '=')
    ->propertyCondition('gid', $nid, '=');

  $query = clone $base_query;
  $count = $query
    ->propertyCondition('entity_type', 'node', '=')
    ->execute();

  $sub_query = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $content_type, '=');

  $query = db_select('og_membership')
    ->fields('og_membership', array('etid'))
    ->condition('group_type', 'node', '=')
    ->condition('gid', $nid, '=')
    ->condition('etid', $sub_query, 'IN');

  $results = $query->execute()->fetchAll();

  return count($results);
}

/**
 * Returns user uids and usernames belonging to a group.
 */
function futurium_isa_extras_get_users_in_group($gid) {
  $query = db_select('users', 'u');

  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  $result = $query->execute()->fetchAll();

  return $result;
}


/**
 * implementing hook_node_presave
 */
function futurium_isa_extras_pdf_processor($form, $form_state) {
  if (isset($form_state['fid'])) {
    $file = file_load($form_state['fid']);
    if (isset($file->uri)) {
      $ip = $_SERVER['SERVER_ADDR'];
      $port = 5002;
      $url = "http://$ip:$port/enricher";
      $uri = $file->uri;
      $filepath = drupal_realpath($uri);

      $headers = array('Content-Type' => 'application/json');
      $data = array (
        'filepath' => $filepath,
        'link' => '',
      );

      $options = array(
        'headers' => $headers,
        'method' => 'POST',
        'data' => drupal_json_encode($data)
      );
      $response = drupal_http_request($url, $options);

      if ($response->code == 200) {
        $json_obj = drupal_json_decode($response->data);

        if (!empty($json_obj['keywords']['count'])) {

          $keywords_by_count = $json_obj['keywords']['count'];

          arsort($keywords_by_count, SORT_NUMERIC);
          $keys = array_slice(array_keys($keywords_by_count), 0, 5);

          for($x = 0; $x < 5; $x++) {
            $keywords[] = $json_obj['keywords']['keywords'][$keys[$x]];
          }
        }

        $intro = $json_obj['important_extracts_proposal_start']['abstract'];
        if (!empty($intro)) {
          $intro = preg_replace( "/\r|\n/", " ", $intro);
          $intro = str_replace('  ', ' ', $intro);
          $commands[] = ajax_command_invoke('.field-name-field-evidence-body textarea', 'val', array($intro));
          if (!empty($keywords)) {
            $commands[] = ajax_command_invoke('.field-name-field-tags input[type="text"]', 'val', array(implode(', ', $keywords)));
          }
          return array('#type' => 'ajax', '#commands' => $commands);
        }
      }
    }
  }
}

// Add extra button to process pdf.
function futurium_isa_extras_field_widget_form_alter(&$element, &$form_state, $context) {
  // If this is an image field type
  if ($context['field']['field_name'] == 'field_evidence_file') {
    $element[0]['#process'][] = '_futurium_isa_extras_process_file_upload';
  }
}

// Add extra button to process pdf.
function _futurium_isa_extras_process_file_upload($element, &$form_state, &$form) {
  if(isset($element['fid']['#value']) && $element['fid']['#value'] != 0) {
    $fid = $element['fid']['#value'];
    $file = file_load($element['fid']['#value']);
    if (substr($file->uri, -3) == 'pdf') {
      $form_state['fid'] = $fid;
      $element[0]['process_file'] = array(
        '#type' => 'button',
        '#value' => 'Extract from file',
        '#ajax' => array(
          'callback' => 'futurium_isa_extras_pdf_processor',
        ),
      );
    }
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function futurium_isa_extras_form_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];
  // Hide revision related fields.
  if (isset($node->nid) || !isset($node->is_new)) {
    $form['revision_information']['log']['#access'] = FALSE;
  }
  $form['revision_information']['#access'] = FALSE;

  if ($form['#bundle'] == 'evidence') {
    if(isset($form['field_evidence_keywords'])) {
      $form['field_evidence_keywords']['#access'] = FALSE;
    }
  }

  if (!isset($_GET['og_group_ref'])) {
    if (isset($form['group_content_access'])) {
      $lang = $form['group_content_access']['#language'];
      $node = $form_state['node'];
      if (!isset($node->nid) || isset($node->is_new)) {
        // New node, if ?og_group_ref isn't set this won't belong to a group.
        // Normally is set to private, so set to public.
        $form['group_content_access'][LANGUAGE_NONE]['#default_value'][0] = 1;
        // And hide the field.
        $form['group_content_access']['#attributes']['style'] = 'display:none';
      }
    }
  }
}

/**
 * Implements hook_ckeditor_plugin().
 */
function futurium_isa_extras_ckeditor_plugin() {
  return array(
    'confighelper' => array(
      'name' => 'confighelper',
      'desc' => t('Config Helper'),
      'path' => drupal_get_path('module', 'futurium_isa_extras') . '/plugins/ckeditor/confighelper/',
    ),
  );
}

/**
 * Implements hook_wysiwyg_plugin().
 *
 * @see hook_wysiwyg_plugin()
 */
function futurium_isa_extras_wysiwyg_plugin($editor, $version) {
  $plugin = array();
  switch ($editor) {
    case 'ckeditor':
      $plugin = array(
        'confighelper' => array(
          'path' => drupal_get_path('module', 'futurium_isa_extras') . '/plugins/ckeditor/confighelper/',
          'file' => 'plugin.js',
          'load' => TRUE,
          'buttons' => array(
            'PlaceholderAttribute' => t('Placeholder Attribute'),
          ),
        ),
      );
      break;
  }
  return $plugin;
}

/**
 * Implements hook_views_query_alter().
 */
function futurium_isa_extras_views_query_alter(&$view, &$query) {
  if ($view->name == 'events' && $view->current_display == 'all_events') {
    if ($view->filter['field_date_time_value']->operator == '<') {
      $query->orderby[0]['direction'] = 'DESC';
    }
    else {
      $query->orderby[0]['direction'] = 'ASC';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function futurium_isa_extras_form_node_type_form_alter(&$form, &$form_state, $form_id) {

  $form['futurium_extras'] = array(
    '#type' => 'fieldset',
    '#title' => t('Futurium Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );

  $form['futurium_extras']['color'] = array(
    '#type' => 'textfield',
    '#title' => t('Content type color'),
    '#size' => 8,
    '#maxlength' => 6,
    '#field_prefix' => '#',
    '#default_value' => variable_get('color_' . $form['#node_type']->type, ''),
  );
}

/**
 * Implements hook_js_alter().
 */
function futurium_isa_extras_js_alter(&$js) {
  // Override springyui renderer.
  if (isset($js['sites/all/libraries/springy/springyui.js'])) {
    $new_ui = $js['sites/all/libraries/springy/springyui.js'];
    $path = drupal_get_path('module', 'futurium_isa_extras') . '/js/springyui.js';
    $new_ui['data'] = $path;
    $js['sites/all/libraries/springy/springyui.js'] = $new_ui;
  }
}
