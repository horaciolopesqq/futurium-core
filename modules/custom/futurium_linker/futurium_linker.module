<?php
/**
 * @file
 * Hic sunt dracones.
 */

/**
 * Implements hook_permission().
 */
function futurium_linker_permission() {
  $perms['administer futurium_linker'] = array(
    'title' => t('Administer Linker'),
    'description' => t('Perform administration tasks for Futurium Links.'),
  );
  $perms['use futurium_linker'] = array(
    'title' => t('Use Futurium Links'),
    'description' => t('Use Futurium Links to connect nodes.'),
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function futurium_linker_menu() {
  $items['node/futurium_linker/autocomplete'] = array(
    'page callback' => '_futurium_linker_node_autocomplete',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('use futurium_linker'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function futurium_linker_block_info() {
  $blocks['relation_link_add'] = array(
    'info' => t('Add relations'),
    'cache' => DRUPAL_NO_CACHE ,
  );
  return$blocks;
}

/**
 * Implements hook_block_view().
 */
function futurium_linker_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'relation_link_add':
      $block['subject'] = t("Add related content");
      if (user_access('use futurium_linker')) {
        $form = drupal_get_form('futurium_linker_form');
        $block['content']['#markup'] = drupal_render($form);
      }
      else {
        $destination = array('destination' => $_GET['q']);
        if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
          // Users can register themselves.
          $link = t(
            '<a href="@login">Log in</a> or <a href="@register">register</a> to create relations',
            array(
              '@login' => url('user/login', array('query' => $destination)),
              '@register' => url('user/register', array('query' => $destination)),
            )
          );
        }
        else {
          // Only admins can add new users, no public registration.
          $link = t('<a href="@login">Log in</a> to create relations', array('@login' => url('user/login', array('query' => $destination))));
        }
        $block['subject'] = t("Add related content");
        $block['content']['#markup'] = $link;
      }
      break;
  }

  return $block;
}

/**
 * Callback for autocomplete box.
 */
function _futurium_linker_node_autocomplete($origin_nid, $bundles, $string) {

  $matches = array();
  if ($string && !empty($bundles)) {

    $origin_node = node_load($origin_nid);

    $bundles = explode('+', $bundles);

    $query = db_select('node', 'n');
    $query
      ->fields('n', array('title', 'nid'));

    drupal_alter('futurium_linker_query', $query);

    $query
      ->condition('n.title', '%' . db_like($string) . '%', 'LIKE')
      ->condition('n.type', $bundles, 'IN');

    $query
      ->distinct();

    $query
      ->groupBy('n.nid');

    $query
      ->range(0, 15);

    $result = $query->execute();

    while ($node = $result->fetchAssoc()) {

      $n = node_load($node['nid']);
      $classes = array('autocomplete-suggestion');

      $possible_relations = _futurium_linker_get_possible_relations($origin_nid, $n->nid);

      drupal_alter('futurium_linker_possible_relations', $possible_relations);

      foreach ($possible_relations as $key => $value) {
        $relation = relation_type_load($value);
        $relations[] = $relation;
        $reverse = _futurium_linker_is_relation_reversed($origin_nid, $value);

        $rel_label = relation_get_type_label($relation, $reverse);

        $array_key = $node['title'] . " {" . $relation->relation_type . "}" . " [" . $node['nid'] . "]";

        $label = '<span';
        if (isset($n->workbench_moderation['current']->state)) {
          $classes[] = $n->workbench_moderation['current']->state;
        }
        $classes[] = 'node-type-' . $n->type;
        $classes[] = 'relation-type-' . $value;
        $label .= ' class="' . implode($classes, ' ') . '">';

        $label .= t("@relation_label", array('@relation_label' => $rel_label));
        $label .= ' ' . check_plain($node['title']);
        $label .= '</span>';

        $matches[$array_key] = $label;
      }
    }
  }

  $matches += _futurium_linker_create_links($origin_nid);

  drupal_json_output($matches);
}

function futurium_linker_futurium_linker_query_alter(&$query) {
  if (module_exists('og')) {
    $query->leftJoin('og_membership', 'og_membership_node', '(og_membership_node.etid = n.nid)');
    $query->leftJoin('field_data_group_access', 'group_access', '(group_access.entity_id = n.nid)');
    $query->leftJoin('field_data_group_content_access', 'group_content_access', '(group_content_access.entity_id = n.nid)');

    $query->fields('og_membership_node', array('gid'));
    $query->fields('group_content_access', array('group_content_access_value'));
    $gids = og_get_entity_groups();

    $base_field = "n.nid";
    $field = "og_membership_node.gid";

    $public_nids = db_select('field_data_group_content_access')
      ->fields('field_data_group_content_access', array('entity_id'))
      ->condition('entity_type', 'node', '=')
      ->condition('group_content_access_value', 1, '=');

    $query->condition(
      db_and()
        ->condition(db_or()
          ->condition($base_field, $public_nids, 'IN')
          ->isNull('og_membership_node.gid')
          ->condition('og_membership_node.gid', $gids['node'], 'IN')
      )
    );
  }
}

/**
 * Ajax callback.
 */
function _futurium_linker_results($form, &$form_state) {
  $target_nid = _futurium_linker_parse_result($form_state['input']['search']);
  $target_relation = _futurium_linker_parse_relation($form_state['input']['search']);

  if ($target_nid !== FALSE) {
    $n = node_load($target_nid);
    $wrapper = '#linker';
    $markup = node_view($n, 'teaser');
    $commands[] = ajax_command_replace($wrapper . ' .preview', '<div class="preview">' . drupal_render($markup) . '</div>');
    $commands[] = ajax_command_invoke($wrapper . ' .button-wrap', 'show');
    $commands[] = ajax_command_invoke($wrapper . ' .no-content-wrap', 'hide');
    if (!empty($target_relation)) {
      $commands[] = ajax_command_invoke($wrapper . ' input[name="relation_type"]', 'val', array($target_relation));
    }
  }
  else {
    $commands[] = ajax_command_remove($wrapper . ' .preview .node');
    $commands[] = ajax_command_invoke($wrapper . ' .no-content-wrap', 'show');
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper function to extract selected node from autocomplete field.
 */
function _futurium_linker_parse_result($value) {
  $result = preg_match('/\[([0-9]+)\]/', $value, $matches);
  if ($result > 0) {
    $result = $matches[0];
    $result = str_replace('[', '', $result);
    $result = str_replace(']', '', $result);
    return $result;
  }
  return FALSE;
}

/**
 * Helper function to extract selected relation from autocomplete field.
 */
function _futurium_linker_parse_relation($value) {
  $result = preg_match('/{(.*?)}/', $value, $matches);
  if ($result > 0) {
    $result = $matches[0];
    $result = str_replace('{', '', $result);
    $result = str_replace('}', '', $result);
    return $result;
  }
  return FALSE;
}

/**
 * Callback to create the link.
 */
function _futurium_linker_link($form, &$form_state) {

  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $origin_nid = $form_state['input']['origin'];
  $target_nid = _futurium_linker_parse_result($form_state['input']['search']);
  $relation = _futurium_linker_parse_relation($form_state['input']['search']);

  $message = _futurium_linker_link_nodes($origin_nid, $target_nid, $relation);

  drupal_set_message($message['message'], $message['type']);

  $wrapper_id = '#linker';

  $commands[] = ajax_command_replace('#linker .feedback', '<div class="feedback"><div class="temporary-messages">' . theme('status_messages') . '</div></div>');
  $commands[] = ajax_command_remove('#linker .feedback + fieldset');
  $commands[] = ajax_command_remove($wrapper . ' .preview .node');
  $commands[] = ajax_command_invoke('#linker .button-wrap', 'hide');
  $commands[] = array('command' => 'fadeMessages');

  if ($message['type'] == 'status') {
    $path = 'node/' . $origin_nid;
    $commands[] = ctools_ajax_command_redirect($path);
  }

  if ($message['type'] == 'warning') {
    $commands[] = ajax_command_invoke('#linker #edit-search', 'val', array(''));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Form to create relations.
 */
function futurium_linker_form($form, &$form_state) {

  $node = menu_get_object();
  $target_nid = NULL;

  if (!isset($node->nid) && isset($form_state['input']['origin'])) {
    $node = node_load($form_state['input']['origin']);
    $target_nid = _futurium_linker_parse_result($form_state['input']['search']);
  }

  if ($node) {
    $current_bundle = 'node:' . $node->type;
    $relations = relation_get_types();
    foreach ($relations as $key => $relation) {
      $bundles = array();
      $source_bundles = $relation->source_bundles;
      $target_bundles = $relation->target_bundles;
      $current_bundle = 'node:' . $node->type;

      if ($relation->directional) {
        if (in_array($current_bundle, $source_bundles, TRUE)) {
          // Current is source for this relation, use target bundles.
          $bundles = implode('+', $target_bundles);
          $direction = 0;
        }

        if (in_array($current_bundle, $target_bundles, TRUE)) {
          // Current is target for this relation, use source bundles.
          $direction = 1;
          $bundles = implode('+', $source_bundles);
        }
      }
      else {
        // The relation is not directional, in that case use sources as well.
        $bundles = implode('+', $source_bundles);
        $direction = 0;
      }
      $bundles = str_replace('node:', '', $bundles);
      $search_bundles[] = $bundles;
    }

    $search_bundles = array_filter($search_bundles);

    $search_bundles = implode('+', $search_bundles);

    $form['#prefix'] = '<div id="linker">';
    $form['#suffix'] = '</div>';

    $form['origin'] = array(
      '#type' => 'hidden',
      '#value' => $node->nid,
    );

    $form['relation_type'] = array(
      '#type' => 'hidden',
    );

    $form['search'] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'node/futurium_linker/autocomplete/' . $node->nid . '/' . $search_bundles,
      '#attributes' => array(
        'placeholder' => t('Search for content to link'),
      ),
      '#ajax' => array(
        'event' => 'autocompleteHidden',
        'callback' => "_futurium_linker_results",
        'wrapper' => 'linker',
      ),
      '#maxlength' => 255,
    );

    $form['feedback'] = array(
      '#markup' => '<div class="feedback"></div>',
    );

    $form['preview'] = array(
      '#markup' => '<div class="preview"></div>',
    );

    $form['#attached'] = array(
      'js' => array(
        drupal_get_path('module', 'futurium_linker') . '/futurium_linker.js' => array(
          'type' => 'file',
          'scope' => 'footer',
          'weight' => 100,
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'futurium_linker') . '/futurium_linker.css',
      ),
    );

    $form['link'] = array(
      '#value' => "Link",
      '#type' => 'button',
      '#attributes' => array(
        'class' => array(
          'btn-add-relation',
        ),
      ),
      '#ajax' => array(
        'callback' => '_futurium_linker_link',
      ),
      '#prefix' => '<span class="button-wrap" style="display:none">',
      '#suffix' => '</span>',
    );

  }
  return $form;

}

/**
 * Helper function to create the relation.
 */
function _futurium_linker_link_nodes($nid1, $nid2, $relation_type = NULL) {

  if ($nid1 == $nid2) {
    return array(
      'message' => t('Creating relation failed. Cannot link entity with itself.'),
      'type' => 'error',
      'fade' => TRUE,
    );
  }
  $origin_nid = $nid1;
  $target_nid = $nid2;

  $o_n = node_load($origin_nid);
  $t_n = node_load($target_nid);

  $relation = relation_type_load($relation_type);
  $reverse = _futurium_linker_is_relation_reversed($origin_nid, $relation_type);

  $endpoints = array(
    array('entity_type' => 'node', 'entity_id' => $o_n->nid),
    array('entity_type' => 'node', 'entity_id' => $t_n->nid),
  );

  if ($reverse) {
    $endpoints = array_reverse($endpoints);
  }

  $results = relation_relation_exists($endpoints, $relation_type);
  if (empty($results)) {
    $new_relation = relation_create($relation_type, $endpoints);
    $rid = relation_save($new_relation);

    if ($relation->directional) {
      $relation_label = relation_get_type_label($relation, $reverse);
    }
    else {
      $relation_label = $relation->label;
    }

    if ($rid) {
      $vars = array(
        '@origin_node' => $o_n->title,
        '@origin_type' => $o_n->type,
        '@target_node' => $t_n->title,
        '@target_type' => $o_n->type,
        '@relation_label' => strtolower($relation_label),
      );

      $message = t('Relation created: @origin_node is <em>@relation_label</em> @target_node', $vars);
      $message_type = 'status';
      $fade = TRUE;
    }
    else {
      $message = t('Creating relationship failed.');
      $message_type = 'error';
      $fade = FALSE;
    }
  }
  else {
    $existing = array_shift($results);
    $message = t('Relationship already exists.');
    $message_type = 'warning';
    $fade = TRUE;
  }

  return array(
    'message' => $message,
    'type' => $message_type,
    'fade' => $fade,
  );

}

/**
 * Return links to create content that can be related to a node.
 */
function _futurium_linker_create_links($nid) {
  $node = node_load($nid);

  $rels = _futurium_linker_get_node_possible_relations($nid);
  foreach ($rels as $k => $relation_type) {
    $content_types[$relation_type] = _futurium_linker_get_related_content_types($nid, $relation_type);
  }

  foreach ($content_types as $relation_type => $possible_content_types) {
    $p_content_types = explode('+', $possible_content_types);
    foreach ($p_content_types as $key => $value) {
      $relation = relation_type_load($relation_type);
      $content_type_name = node_type_get_name($value);
      $path = 'node/add/' . str_replace("_", "-", $value);
      $path .= '?related_to=' . $nid . '&relation_type=' . $relation_type;

      $reverse = !_futurium_linker_is_relation_reversed($nid, $relation_type);
      $label = relation_get_type_label($relation, $reverse);

      drupal_alter('relation_content_type_autocomplete', $content_type_name);
      drupal_alter('relation_label_autocomplete', $label);

      $links[$path][] = "+ Create new $content_type_name $label this";
      $links[$path][] = "autocomplete-new $value";
    }
  }

  return $links;

}

/**
 * Implements relation_label_autocomplete_alter().
 */
function futurium_linker_relation_label_autocomplete_alter(&$label) {
  switch ($label) {
    case 'supports':
      $label = 'that supports';
      break;

  }
}

/**
 * Implements relation_content_type_autocomplete_alter().
 */
function futurium_linker_relation_content_type_autocomplete_alter(&$content_type) {
  switch ($content_type) {
    case 'Ideas':
      $content_type = 'Idea';
      break;

    case 'Futures':
      $content_type = 'Future';
      break;
  }
}

/**
 * Returns content types that can be related to a node.
 */
function _futurium_linker_get_related_content_types($nid, $relation_type) {
  $relation = relation_type_load($relation_type);
  $node = node_load($nid);

  $current_bundle = 'node:' . $node->type;
  $relations = relation_get_types();
  $bundles = array();
  $source_bundles = $relation->source_bundles;
  $target_bundles = $relation->target_bundles;
  $current_bundle = 'node:' . $node->type;

  if ($relation->directional) {
    if (in_array($current_bundle, $source_bundles, TRUE)) {
      // Current is source for this relation, use target bundles.
      $bundles = implode('+', $target_bundles);
      $direction = 0;
    }

    if (in_array($current_bundle, $target_bundles, TRUE)) {
      // Current is target for this relation, use source bundles.
      $direction = 1;
      $bundles = implode('+', $source_bundles);
    }
  }
  else {
    // The relation is not directional, in that case use sources as well.
    $bundles = implode('+', $source_bundles);
    $direction = 0;
  }
  $bundles = str_replace('node:', '', $bundles);
  return $bundles;
}

/**
 * Return all possible relation types a node can be involved in.
 */
function _futurium_linker_get_node_possible_relations($nid1) {
  $o_n = node_load($nid1);

  $as = array_keys(_relation_get_available_types('node', $o_n->type));
  $at = array_keys(_relation_get_available_types('node', $o_n->type, 'target'));

  $a_all = array_unique(array_merge($as, $at));

  return $a_all;
}

/**
 * Return all possible relation types between two nodes.
 */
function _futurium_linker_get_possible_relations($nid1, $nid2) {

  $o_n = node_load($nid1);
  $t_n = node_load($nid2);

  $as = array_keys(_relation_get_available_types('node', $o_n->type, 'source'));
  $at = array_keys(_relation_get_available_types('node', $o_n->type, 'target'));

  $bs = array_keys(_relation_get_available_types('node', $t_n->type, 'source'));
  $bt = array_keys(_relation_get_available_types('node', $t_n->type, 'target'));

  $a_all = array_intersect($as, $bt);
  $b_all = array_intersect($bs, $at);

  $all = array_unique(array_merge($a_all, $b_all));

  return $all;
}

/**
 * Helper function: check if a relation is reversed in a node context.
 */
function _futurium_linker_is_relation_reversed($nid1, $relation_type) {
  $o_n = node_load($nid1);
  $relation = relation_type_load($relation_type);
  // Directional relation.
  if ($relation->directional) {
    if (in_array('node:' . $o_n->type, $relation->target_bundles, TRUE)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function futurium_linker_form_node_form_alter(&$form, $form_state) {
  if (isset($_GET['related_to']) && isset($_GET['relation_type'])) {
    $form['relation_type'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['relation_type'],
    );
    $form['related_to'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['related_to'],
    );
    if (isset($_GET['new_title'])) {
      $form['title']['#default_value'] = $_GET['new_title'];
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function futurium_linker_node_insert($node) {
  if (isset($node->relation_type) && isset($node->related_to)) {
    _futurium_linker_link_nodes($node->related_to, $node->nid, $node->relation_type);
  }
}

/**
 * The original doesn't take into account directional relations.
 */
function _relation_get_available_types($entity_type, $bundle, $endpoint = 'source') {
  $bundle_key = $entity_type . ':' . $bundle;
  $all_bundle_key = $entity_type . ':*';
  $relation_types = relation_get_types();

  foreach ($relation_types as $type => $relation_type) {
    $available = FALSE;
    if ($endpoint == 'source' || $endpoint == 'both') {
      if (in_array($bundle_key, $relation_type->source_bundles) || in_array($all_bundle_key, $relation_type->source_bundles)) {
        $available = TRUE;
      }
    }
    if ($endpoint == 'target' || $endpoint == 'both') {
      if ($relation_type->directional) {
        if (in_array($bundle_key, $relation_type->target_bundles) || in_array($all_bundle_key, $relation_type->target_bundles)) {
          $available = TRUE;
        }
      }
      else {
        if ((in_array($bundle_key, $relation_type->source_bundles) || in_array($all_bundle_key, $relation_type->source_bundles)) && !$relation_type->directional) {
          $available = TRUE;
        }
      }
    }
    if (!$available) {
      unset($relation_types[$type]);
    }
  }
  return $relation_types;
}
