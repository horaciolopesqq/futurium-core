<?php

/**
 * @file
 * Code for the Futurium Groups feature.
 */
function futurium_groups_flavors_preprocess_html(&$variables) {
  $context = context_get("futurium_groups");
  if (isset($context['active_group'])) {

    $node = $context['active_group'];

    $body_class = _futurium_groups_get_group_body_css_class($node);
    $variables['classes_array'][] = 'page-' . $body_class;
    $variables['classes_array'][] = 'flavour-' . $body_class;

    if ($context['page_type'] == 'homepage') {
      $variables['classes_array'][] = 'flavour-landing-page';
      $variables['classes_array'][] = 'front';
    }
  }
}

function futurium_groups_flavors_process_page(&$variables) {
  $item = menu_get_item();
  if ($item['path'] == 'node/%') {
    global $theme;
    if ($theme == 'd4eu') {
      $variables['theme_hook_suggestions'][] = 'page__normal_page';
      $context = context_get("futurium_groups");
      if (isset($context['active_group'])) {
        if ($context['page_type'] == 'homepage') {
          $variables['landing_page'] = TRUE;
          $variables['theme_hook_suggestions'][] = 'page__landing_page';
        }
      }
    }
  }
}

function _futurium_groups_get_group_body_css_class($node) {
  if (isset($node->field_futurium_group_css_class[LANGUAGE_NONE][0]['value'])) {
    return $node->field_futurium_group_css_class[LANGUAGE_NONE][0]['value'];
  }
}

/**
 * Implements hook_node_insert().
 */
/*
function futurium_groups_node_insert($node) {
  if ($node->type === 'futurium_group') {
    _futurium_groups_create_menu($node);
    _futurium_groups_create_context($node);
  }
}
*/
/**
 * Implements hook_node_insert().
 */
/*
function futurium_groups_node_delete($node) {
  if ($node->type === 'futurium_group') {
    $menu = menu_load("group_menu_" . $node->nid);
    menu_delete($menu);

    $context = context_load("futurium_group_" . $node->nid);
    context_delete($context);
  }
}
*/
/**
 * Helper function to create a menu per group.
 */
function _futurium_groups_create_menu($group) {
  $menu = array(
    "menu_name" => "group_menu_" . $group->nid,
    "title" => $group->title . " Menu",
    "description" => $group->title . " Menu"
  );
  menu_save($menu);

  $home_mlid = db_select("menu_links", "m")
    ->condition("menu_name", "main-menu", "=")
    ->condition("link_path", "<front>", "=")
    ->fields("m", array("mlid"))
    ->execute()
    ->fetchAssoc();

  $home_menu_link = menu_link_load($home_mlid["mlid"]);

  // Add a Home entry and a Flavor landing page entry to each menu.
  $current_home_mlid = db_select("menu_links", "m")
    ->condition("link_path", "node/" . $group->nid, "=")
    ->condition("menu_name", "group_menu_" . $group->nid, "=")
    ->fields("m", array("mlid"))
    ->execute()
    ->fetchAssoc();

  if (empty($current_home_mlid)) {
    $item = $home_menu_link;
    $item = array(
      'link_path' => 'node/' . $group->nid,
      'link_title' => $group->title,
      'menu_name' => 'group_menu_' . $group->nid,
      'weight' => 0,
      'language' => $group->language,
      'plid' => 0,
      'mlid' => NULL,
      'module' => 'menu',
    );
    menu_link_save($item);
  }
}

/**
 * Helper function to create a context per group.
 */
function _futurium_groups_create_context($group) {

  $contexts = db_select("context", "c")
    ->fields('c', array('name'))
    ->execute()
    ->fetchAllAssoc('name');

  // All pages (Landing and non-landing pages).
  if (!isset($contexts["futurium_group_" . $group->nid])) {
    ctools_include('export');
    $context = ctools_export_new_object('context');
    $context->name = "futurium_group_" . $group->nid;
    $context->tag = 'Futurium Groups';
    $context->description = "All pages for " . $group->title . " group.";
    $context->conditions = array();
    $context->reactions = array(
      'block' => array(
        'blocks' => array(
          "group_menu_" . $group->nid => array(
            'module' => 'menu',
            'delta' => "group_menu_" . $group->nid,
            'region' => 'main_navigation',
            'weight' => -10,
          ),
        ),
      ),
    );
    $context->condition_mode = 0;
    $saved = context_save($context);
  }
}


function futurium_groups_preprocess_page(&$variables) {
  $group = menu_get_object();
  $content_type = menu_get_object();
}

function futurium_groups_preprocess(&$variables, $hook) {
  if (isset($variables['elements']['#entity_type'])) { // or maybe check for $hook name
    $function = __FUNCTION__ . '_' . $variables['elements']['#entity_type'];
    if (function_exists($function)) {
      $function($variables, $hook);
    }
  }
}

function futurium_groups_preprocess_bean(&$vars) {
  // Preprocess bean blocks.
  if (isset($vars['bean'])) {
    global $user;
    $bean = $vars['bean'];
    if (is_object($bean)) {
      $vars['bean'] = $bean;

      $vars['formatted_link'] = "";

      $field_block_type = field_get_items('bean', $bean, 'field_block_type');
      if (isset($field_block_type[0]['value'])) {
        $vars['classes_array'][] = $field_block_type[0]['value'];
      }

      $field_block_classes = field_get_items('bean', $bean, 'field_block_type');
      if (isset($field_block_classes[0]['safe_value'])) {
        $vars['classes_array'][] = $field_block_classes[0]['safe_value'];
      }

      $field_links = field_get_items('bean', $bean, 'field_links');
      if (isset($field_links[0]['value'])) {
        $links_fc = $field_links[0]['value'];
        $entities = entity_load('field_collection_item', array($links_fc));

        $links_e = array_shift($entities);

        if (!empty($links_e->field_call_to_action)) {
          $markup = "";
          $link_items = field_get_items('field_collection_item', $links_e, 'field_link_type');
          $vars['link']['type'] = $link_items[0]['value'];

          $link_link_items = field_get_items('field_collection_item', $links_e, 'field_call_to_action');
          $vars['link']['link'] = $link_link_items[0];

          $spans = explode('|', $vars['link']['link']['title']);
          $class = 'normal-link';
          if ($vars['link']['type'] == 'cta') {
            $class = 'CTAButton';
          }
          foreach ($spans as $k => $v) {
            $markup .= '<span>' . $v . '</span>';
          }

          $vars['formatted_link'] = l($markup, $vars['link']['link']['url'], array(
            'html' => TRUE,
            'attributes' => array(
              'class' => array(
                $class,
              ),
              'rel' => 'nofollow',
            ),
          ));
        }
      }
    }
  }
}

function futurium_groups_views_pre_render(&$view) {
  if ($view->name == 'futurium_groups_list_of_user_blocks') {
    // Remove bean from view result.
    global $user;
    foreach ($view->result as $idx => $row_data) {

      $delta = $row_data->bean_delta;
      $bean = bean_load($delta);

      $visibility = field_get_items('bean', $bean, 'field_roles');
      $visibility = $visibility[0]['value'];

      switch ($visibility) {
        case 'anonymous':
          if ($user->uid != 0) {
            unset($view->result[$idx]);
          }
          break;

        case 'authenticated':
          if ($user->uid == 0) {
            unset($view->result[$idx]);
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function futurium_groups_preprocess_block(&$vars) {
  if ($vars['block']->bid === 'views-cecfc786c6a714093f95f24f23c704c6') {
    $vars['classes_array'][] = 'user-blocks';
    $class_idx = array_search('block', $vars['classes_array']);
    unset($vars['classes_array'][$class_idx]);
    $vars['theme_hook_suggestions'][] = 'block__no_panel';
  }
}


/**
* Implements hook_field_extra_fields().
*/
/*
function futurium_groups_field_extra_fields() {
  $extrafield_name = 'comment_count';
  foreach (array('page', 'article') as $node_type) {
    $extra['node'][$node_type]['display'][$extrafield_name] = array(
      'label' => t('Comment count'),
      'description' => t('A serious description.'),
      'weight' => 50, // default weight, can be changed on display form by site-builder.
    );
  }
  $extrafield_name = 'post_date';
  foreach (array('page', 'article') as $node_type) {
    $extra['node'][$node_type]['display'][$extrafield_name] = array(
      'label' => t('Post date'),
      'description' => t('A serious description.'),
      'weight' => 50, // default weight, can be changed on display form by site-builder.
    );
  }
  return $extra;
}



/**
 * Implements hook_entity_view().
 */
/*
function futurium_groups_node_view($node, $view_mode, $langcode) {
  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);
  $extrafield_name = 'comment_count';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    // Your logic here.
    $node->content[$extrafield_name] = array('#markup' => '<div class="extra-field">' . format_plural($node->comment_count, '1 comment', '@count comments') . '</div>');
  }
  $extrafield_name = 'post_date';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    // Your logic here.
    $node->content[$extrafield_name] = array('#markup' => '<div class="extra-field">' . format_date($node->created, 'custom', 'd/m/Y') . '</div>');
  }
}

function mymodule_hide_new_extra_field($entity_type, $bundle, $field_name) {
  $settings = field_bundle_settings($entity_type, $bundle);
  $settings_updated = FALSE;
  $entity_info = entity_get_info($entity_type, $bundle);
  $view_modes = array_keys($entity_info['view modes']);
  if (!in_array('default', $view_modes)) $view_modes[] = 'default';
  foreach ($view_modes as $view_mode) {
    if (!isset($settings['extra_fields']['display'][$field_name][$view_mode])) {
      $settings_updated = TRUE;
      $settings['extra_fields']['display'][$field_name][$view_mode] = array(
        'weight' => 100,
        'visible' => FALSE,
      );
    }
  }
  if ($settings_updated) {
    field_bundle_settings($entity_type, $bundle, $settings);
  }
}
*/


function _futurium_groups_flavors_migrate_content() {
  $field = field_info_field('field_default_flavour');

  $vocab = taxonomy_vocabulary_machine_name_load('flavors');
  $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
  set_time_limit(0);
  global $user;
  if (!empty($tree)) {
    foreach ($tree as $key => $term) {
      $node = new stdClass();
      $node->title = $term->name;
      $node->type = "futurium_group";
      node_object_prepare($node);
      $node->language = LANGUAGE_NONE;
      $node->uid = $user->uid;
      $node->status = 1;
      $node->promote = 0;
      $node->comment = 0;

      $node->field_group_description[LANGUAGE_NONE][0]['value'] = $term->description;
      $node->field_futurium_group_path[LANGUAGE_NONE][0]['value'] = $term->field_path[LANGUAGE_NONE][0]['value'];
      $node->field_futurium_group_css_class[LANGUAGE_NONE][0]['value'] = $term->field_class[LANGUAGE_NONE][0]['value'];

      $node = node_submit($node);
      node_save($node);

      $created_nid = $node->nid;

      $res = db_query("SELECT * FROM {field_data_field_default_flavour} WHERE field_default_flavour_tid = :tid", array(':tid' => $term->tid))->fetchAll();

      foreach ($res as $record) {
        $entity_type = $record->entity_type;
        $entity_id = $record->entity_id;
        $bundle = $record->bundle;
        $entity = call_user_func($entity_type . '_load', $entity_id);
        $entity->og_group_ref[LANGUAGE_NONE][0] = array(
          'target_id' => $created_nid,
        );
        field_attach_presave($entity_type, $entity);
        field_attach_update($entity_type, $entity);
      }
    }
  }
}
